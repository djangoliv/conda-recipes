diff --git a/modules/rmf/dependency/RMF/include/RMF/BufferConstHandle.h b/modules/rmf/dependency/RMF/include/RMF/BufferConstHandle.h
index 5c4d19d..495a90c 100644
--- a/modules/rmf/dependency/RMF/include/RMF/BufferConstHandle.h
+++ b/modules/rmf/dependency/RMF/include/RMF/BufferConstHandle.h
@@ -69,6 +69,11 @@ class BufferConstHandle {
 #endif
 };
 
+//! Produce hash values for boost hash tables.
+inline std::size_t hash_value(const BufferConstHandle &t) {
+  return t.__hash__();
+}
+
 RMFEXPORT BufferConstHandle read_buffer(std::string file_name);
 
 RMFEXPORT void write_buffer(BufferConstHandle buffer, std::string file_name);
diff --git a/modules/rmf/dependency/RMF/include/RMF/Enum.h b/modules/rmf/dependency/RMF/include/RMF/Enum.h
index 2a44e7c..12f03f8 100644
--- a/modules/rmf/dependency/RMF/include/RMF/Enum.h
+++ b/modules/rmf/dependency/RMF/include/RMF/Enum.h
@@ -79,6 +79,12 @@ class Enum {
 #endif
 };
 
+//! Produce hash values for boost hash tables.
+template <class TagT>
+inline std::size_t hash_value(const Enum<TagT>& t) {
+  return t.__hash__();
+}
+
 #if !defined(SWIG) && !defined(RMF_DOXYGEN)
 template <class Traits>
 inline std::ostream& operator<<(std::ostream& out, Enum<Traits> v) {
diff --git a/modules/rmf/dependency/RMF/include/RMF/FileConstHandle.h b/modules/rmf/dependency/RMF/include/RMF/FileConstHandle.h
index 04380d1..723a230 100644
--- a/modules/rmf/dependency/RMF/include/RMF/FileConstHandle.h
+++ b/modules/rmf/dependency/RMF/include/RMF/FileConstHandle.h
@@ -355,6 +355,11 @@ class RMFEXPORT FileConstHandle {
   void reload();
 };
 
+//! Produce hash values for boost hash tables.
+inline std::size_t hash_value(const FileConstHandle& t) {
+  return t.__hash__();
+}
+
 /**
    Open an RMF from a file system path in read-only mode.
 
diff --git a/modules/rmf/dependency/RMF/include/RMF/HDF5/DataSetIndexD.h b/modules/rmf/dependency/RMF/include/RMF/HDF5/DataSetIndexD.h
index 48ec47d..3f9b00d 100644
--- a/modules/rmf/dependency/RMF/include/RMF/HDF5/DataSetIndexD.h
+++ b/modules/rmf/dependency/RMF/include/RMF/HDF5/DataSetIndexD.h
@@ -91,6 +91,12 @@ RMF_ENABLE_WARNINGS namespace RMF {
                       } return ret;);
   };
 
+  //! Produce hash values for boost hash tables.
+  template <int D>
+  inline std::size_t hash_value(const DataSetIndexD<D>& t) {
+    return t.__hash__();
+  }
+
 #ifndef RMF_DOXYGEN
   typedef DataSetIndexD<1> DataSetIndex1D;
   typedef std::vector<DataSetIndex1D> DataSetIndex1Ds;
diff --git a/modules/rmf/dependency/RMF/include/RMF/ID.h b/modules/rmf/dependency/RMF/include/RMF/ID.h
index 24f7d14..8b0ee7c 100644
--- a/modules/rmf/dependency/RMF/include/RMF/ID.h
+++ b/modules/rmf/dependency/RMF/include/RMF/ID.h
@@ -96,6 +96,12 @@ class ID {
 #endif
 };
 
+//! Produce hash values for boost hash tables.
+template <class TagT>
+inline std::size_t hash_value(const ID<TagT>& t) {
+  return t.__hash__();
+}
+
 /** Identify a node within a file. */
 typedef ID<NodeTag> NodeID;
 /** Identify a frame within a file. */
diff --git a/modules/rmf/dependency/RMF/include/RMF/NodeConstHandle.h b/modules/rmf/dependency/RMF/include/RMF/NodeConstHandle.h
index c06fda3..c3afba3 100644
--- a/modules/rmf/dependency/RMF/include/RMF/NodeConstHandle.h
+++ b/modules/rmf/dependency/RMF/include/RMF/NodeConstHandle.h
@@ -210,6 +210,11 @@ class RMFEXPORT NodeConstHandle
   FileConstHandle get_file() const;
 };
 
+//! Produce hash values for boost hash tables.
+inline std::size_t hash_value(const NodeConstHandle& t) {
+  return t.__hash__();
+}
+
 } /* namespace RMF */
 
 RMF_DISABLE_WARNINGS
diff --git a/modules/rmf/dependency/RMF/include/RMF/infrastructure_macros.h b/modules/rmf/dependency/RMF/include/RMF/infrastructure_macros.h
index a26ee5d..05740da 100644
--- a/modules/rmf/dependency/RMF/include/RMF/infrastructure_macros.h
+++ b/modules/rmf/dependency/RMF/include/RMF/infrastructure_macros.h
@@ -182,13 +182,6 @@ class Nullable;
 struct Showable;
 inline std::ostream& operator<<(std::ostream& out, const Showable& t);
 
-/** Produce hash values for boost hash tables.
- */
-template <class T>
-inline std::size_t hash_value(const T& t) {
-  return t.__hash__();
-}
-
 /** An adaptor class to provide operator<< for classes easily. */
 struct Showable {
   std::string t_;
